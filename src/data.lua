---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by WGPavell.
--- DateTime: 22.03.2025 13:10
---

TARGET_FLAG_NONE_INT = 1
TARGET_FLAG_GROUND_INT = 2
TARGET_FLAG_AIR_INT = 4
TARGET_FLAG_STRUCTURE_INT = 8
TARGET_FLAG_WARD_INT = 16
TARGET_FLAG_ITEM_INT = 32
TARGET_FLAG_TREE_INT = 64
TARGET_FLAG_WALL_INT = 128
TARGET_FLAG_DEBRIS_INT = 256
TARGET_FLAG_DECORATION_INT = 512
TARGET_FLAG_BRIDGE_INT = 1024

function dump(o)
    if type(o) == 'table' then
        local s = '{ '
        for k,v in pairs(o) do
            if type(k) ~= 'number' then k = '"'..k..'"' end
            s = s .. '['..k..'] = ' .. dump(v) .. ','
        end
        return s .. '} '
    else
        return tostring(o)
    end
end

---debugPrint
---@param message string
function debugPrint(message)
    DisplayTextToPlayer(Player(0), 0, 0, message)
end

---debugPrintAny
---@param object any
function debugPrintAny(object)
    debugPrint(tostring(object))
end

-- Why I don't use GetLocalizedString here? Because of some reason it doesn't work before main function
unitGroups = {
    {
        id = "human",
        race_key = "KEY_HUMAN",
        unit_codes = {'hpea', 'hfoo', 'hrif', 'hkni', 'hsor', 'hmpr', 'hspt', 'hgyr', 'hmtm', 'hmtt', 'hgry', 'hdhw', 'Hpal', 'Hamg', 'Hmkg', 'Hblm'}
    },
    {
        id = "orc",
        race_key = "KEY_ORC",
        unit_codes = {'opeo', 'ogru', 'ohun', 'ocat', 'oshm', 'odoc', 'ospw', 'orai', 'okod', 'owyv', 'otbr', 'otau', 'Obla', 'Ofar', 'Otch', 'Oshd'}
    },
    {
        id = "undead",
        race_key = "KEY_UNDEAD",
        unit_codes = {'uaco', 'ugho', 'ucry', 'ugar', 'unec', 'uban', 'umtw', 'uabo', 'uobs', 'ufro', 'Udea', 'Ulic', 'Udre', 'Ucrl'}
    },
    {
        id = "nightelf",
        race_key = "KEY_NIGHTELF",
        unit_codes = {'earc', 'esen', 'ebal', 'edry', 'edoc', 'emtg', 'ehip', 'ehpr', 'edot', 'efdr', 'echm', 'Ekee', 'Emoo', 'Edem', 'Ewar'}
    },
}

upgrades = {
    {
        code = 'Rhar',
        units = {'hfoo', 'hgyr', 'hkni', 'hmtt'}
    },
    {
        code = 'Rhme',
        units = {'hfoo', 'hgry', 'hkni'}
    },
    {
        code = 'Rhde',
        units = {'hfoo'}
    },
    {
        code = 'Rhan',
        units = {'hgry', 'hkni'}
    },
    {
        code = 'Rhla',
        units = {'hgry', 'hmtm', 'hrif'}
    },
    {
        code = 'Rhhb',
        units = {'hgry'}
    },
    {
        code = 'Rhra',
        units = {'hgyr', 'hmtm', 'hmtt', 'hrif'}
    },
    {
        code = 'Rhgb',
        units = {'hgyr'}
    },
    {
        code = 'Rhpt',
        units = {'hmpr'}
    },
    {
        code = 'Rhfl',
        units = {'hmtm'}
    },
    {
        code = 'Rhlh',
        units = {'hpea'}
    },
    {
        code = 'Rhri',
        units = {'hrif'}
    },
    {
        code = 'Rhst',
        units = {'hsor'}
    },
    {
        code = 'Roar',
        units = {'ocat', 'ogru', 'ohun', 'orai', 'otau', 'owyv'}
    },
    {
        code = 'Rora',
        units = {'ocat', 'ohun', 'owyv'}
    },
    {
        code = 'Rowd',
        units = {'odoc'}
    },
    {
        code = 'Rotr',
        units = {'odoc', 'ohun'}
    },
    {
        code = 'Rome',
        units = {'ogru', 'orai', 'otau'}
    },
    {
        code = 'Robs',
        units = {'ogru'}
    },
    {
        code = 'Ropg',
        units = {'ogru', 'opeo', 'orai'}
    },
    {
        code = 'Rwdm',
        units = {'okod'}
    },
    {
        code = 'Roen',
        units = {'orai'}
    },
    {
        code = 'Rost',
        units = {'oshm'}
    },
    {
        code = 'Rows',
        units = {'otau'}
    },
    {
        code = 'Rowt',
        units = {'owyv'}
    },
    {
        code = 'Rovs',
        units = {'owyv'}
    },
    {
        code = 'Reuv',
        units = {'Edem', 'Ekee', 'Emoo', 'earc', 'ebal', 'echm', 'edoc', 'edot', 'edry', 'ehip', 'ehpr', 'esen'}
    },
    {
        code = 'Resm',
        units = {'earc', 'ebal', 'ehpr', 'esen'}
    },
    {
        code = 'Rema',
        units = {'earc', 'ehpr', 'esen'}
    },
    {
        code = 'Reib',
        units = {'earc', 'ehpr'}
    },
    {
        code = 'Remk',
        units = {'earc', 'ehpr'}
    },
    {
        code = 'Repb',
        units = {'ebal'}
    },
    {
        code = 'Resw',
        units = {'echm', 'edry', 'ehip'}
    },
    {
        code = 'Rerh',
        units = {'echm', 'edry', 'ehip'}
    },
    {
        code = 'Recb',
        units = {'echm'}
    },
    {
        code = 'Redc',
        units = {'edoc'}
    },
    {
        code = 'Redt',
        units = {'edot'}
    },
    {
        code = 'Resi',
        units = {'edry'}
    },
    {
        code = 'Reht',
        units = {'ehip', 'ehpr'}
    },
    {
        code = 'Resc',
        units = {'esen'}
    },
    {
        code = 'Remg',
        units = {'esen'}
    },
    {
        code = 'Ruar',
        units = {'uabo', 'ugho'}
    },
    {
        code = 'Rume',
        units = {'uabo', 'ugho', 'umtw'}
    },
    {
        code = 'Rupc',
        units = {'uabo', 'umtw'}
    },
    {
        code = 'Ruba',
        units = {'uban'}
    },
    {
        code = 'Rura',
        units = {'ucry', 'ufro', 'ugar'}
    },
    {
        code = 'Rucr',
        units = {'ucry', 'ufro', 'ugar'}
    },
    {
        code = 'Ruwb',
        units = {'ucry'}
    },
    {
        code = 'Rufb',
        units = {'ufro'}
    },
    {
        code = 'Rusf',
        units = {'ugar'}
    },
    {
        code = 'Rugf',
        units = {'ugho'}
    },
    {
        code = 'Ruac',
        units = {'ugho'}
    },
    {
        code = 'Rusl',
        units = {'unec'}
    },
    {
        code = 'Rune',
        units = {'unec'}
    }
}

unitsUpgradesDependencies = {}
unitList = {}

OnInit.map(function()
    for _, upgrade in ipairs(upgrades) do
        upgrade.name = GetAbilityName(FourCC(upgrade.code))
        upgrade.icon = BlzGetAbilityIcon(FourCC(upgrade.code))
        for _, unit in ipairs(upgrade.units) do
            if unitsUpgradesDependencies[unit] == nil then
                unitsUpgradesDependencies[unit] = {}
            end
            table.insert(unitsUpgradesDependencies[unit], upgrade.code)
        end
    end

    for _, group in ipairs(unitGroups) do
        local unitsData = {}
        for _, code in ipairs(group.unit_codes) do
            local subject = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), FourCC(code), 0, 0, 0)
            local targeted_as = BlzGetUnitIntegerField(subject, UNIT_IF_TARGETED_AS)
            local attack1_enabled = BlzGetUnitWeaponBooleanField(subject, UNIT_WEAPON_BF_ATTACKS_ENABLED, 0)
            local attack1_targets = BlzGetUnitWeaponIntegerField(subject, UNIT_WEAPON_IF_ATTACK_TARGETS_ALLOWED, 0)
            local attack2_enabled = BlzGetUnitWeaponBooleanField(subject, UNIT_WEAPON_BF_ATTACKS_ENABLED, 1)
            local attack2_targets = BlzGetUnitWeaponIntegerField(subject, UNIT_WEAPON_IF_ATTACK_TARGETS_ALLOWED, 1)
            table.insert(unitsData, {
                code = code,
                name = BlzGetUnitStringField(subject, UNIT_SF_NAME),
                is_hero = IsUnitType(subject, UNIT_TYPE_HERO),
                food_cost = GetUnitFoodUsed(subject),
                unit_target = {
                    ground = targeted_as & TARGET_FLAG_GROUND_INT ~= 0,
                    air = targeted_as & TARGET_FLAG_AIR_INT ~= 0,
                },
                attack_target = {
                    ground = (attack1_enabled and attack1_targets & TARGET_FLAG_GROUND_INT ~= 0) or (attack2_enabled and attack2_targets & TARGET_FLAG_GROUND_INT ~= 0),
                    air = (attack1_enabled and attack1_targets & TARGET_FLAG_AIR_INT ~= 0) or (attack2_enabled and attack2_targets & TARGET_FLAG_AIR_INT ~= 0)
                },
                icon = BlzGetAbilityIcon(FourCC(code))
            })
            RemoveUnit(subject)
        end
        table.insert(unitList, {
            id = group.id,
            race = GetLocalizedString(group.race_key),
            units = unitsData
        })
    end
    --TimerStart(CreateTimer(), 0.1, false, function()
    --    debugPrint(dump(unitList))
    --end)
end)