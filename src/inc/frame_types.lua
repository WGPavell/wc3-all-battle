---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by WGPavell.
--- DateTime: 24.03.2025 19:44
---

--- @class SimpleBaseFrame
SimpleBaseFrame = {}
function SimpleBaseFrame:new()
    local obj = {handle = nil}

    ---setSize
    ---@param width number
    ---@param height number
    function obj:setSize(width, height)
        BlzFrameSetSize(self.handle, width, height)
        return self
    end

    ---setAbsPoint
    ---@param point framepointtype
    ---@param x number
    ---@param y number
    function obj:setAbsPoint(point, x, y)
        BlzFrameSetAbsPoint(self.handle, point, x, y)
        return self
    end

    ---setRelativePoint
    ---@param selfPoint framepointtype
    ---@param relativeFrame framehandle
    ---@param relativePoint framepointtype
    ---@param x number
    ---@param y number
    function obj:setRelativePoint(selfPoint, relativeFrame, relativePoint, x, y)
        BlzFrameSetPoint(self.handle, selfPoint, relativeFrame, relativePoint, x, y)
        return self
    end

    ---setScale
    ---@param scale number
    function obj:setScale(scale)
        BlzFrameSetScale(self.handle, scale)
        return self
    end

    ---setVisible
    ---@param visibility boolean
    function obj:setVisible(visibility)
        BlzFrameSetVisible(self.handle, visibility)
        return self
    end

    ---setAlpha
    ---@param alpha integer
    function obj:setAlpha(alpha)
        BlzFrameSetAlpha(self.handle, alpha)
        return self
    end

    ---animateFadeIn
    ---@param duration number
    ---@param callback function
    function obj:animateFadeIn(duration, callback)
        local timer = CreateTimer()
        local ticks = 0
        local alphaPerTick = 255 / duration / 60
        self:setVisible(true)
        TimerStart(timer, 1 / 60, true, function()
            local newAlpha = math.floor(alphaPerTick * ticks + 0.5)
            ticks = ticks + 1
            self:setAlpha(newAlpha)
            if newAlpha >= 255 then
                PauseTimer(timer)
                DestroyTimer(timer)
                if type(callback) == "function" then
                    callback()
                end
            end
        end)
        return self
    end

    ---animateFadeOut
    ---@param duration number
    ---@param callback function
    function obj:animateFadeOut(duration, callback)
        local timer = CreateTimer()
        local ticks = 0
        local alphaPerTick = 255 / duration / 60
        TimerStart(timer, 1 / 60, true, function()
            local newAlpha = math.floor(255 - alphaPerTick * ticks + 0.5)
            ticks = ticks + 1
            self:setAlpha(newAlpha)
            if newAlpha <= 0 then
                PauseTimer(timer)
                DestroyTimer(timer)
                self:setVisible(false)
                if type(callback) == "function" then
                    callback()
                end
            end
        end)
        return self
    end

    ---getWidth
    function obj:getWidth()
        return BlzFrameGetWidth(self.handle)
    end

    ---getHeight
    function obj:getHeight()
        return BlzFrameGetHeight(self.handle)
    end

    ---animateSize
    ---@param duration number
    ---@param toWidth number
    ---@param toHeight number
    ---@param fromWidth number
    ---@param fromHeight number
    ---@param callback function
    function obj:animateSize(duration, toWidth, toHeight, fromWidth, fromHeight, callback)
        local animateWidth = toWidth ~= nil
        local animateHeight = toHeight ~= nil
        fromWidth = fromWidth == nil and self:getWidth() or fromWidth
        fromHeight = fromHeight == nil and self:getHeight() or fromHeight
        local ticks = 0
        local finishTicks = duration * 60
        local timer = CreateTimer()
        local widthPerTick = animateWidth and (toWidth - fromWidth) / duration / 60 or 0
        local heightPerTick = animateHeight and (toHeight - fromHeight) / duration / 60 or 0
        TimerStart(timer, 1 / 60, true, function()
            ticks = ticks + 1
            self:setSize(fromWidth + (widthPerTick * ticks), fromHeight + (heightPerTick * ticks))
            if ticks >= finishTicks then
                PauseTimer(timer)
                DestroyTimer(timer)
                if type(callback) == "function" then
                    callback()
                end
            end
        end)
        return self
    end

    setmetatable(obj, self)
    self.__index = self
    return obj
end

--- @class SimpleTypeFrame
SimpleTypeFrame = {}
setmetatable(SimpleTypeFrame, {__index = SimpleBaseFrame})
---new
---@param name string
---@param frameType string
---@param parent framehandle
---@param inherits string
---@param context integer
function SimpleTypeFrame:new(name, frameType, parent, inherits, context)
    local frame = SimpleBaseFrame:new()
    frame.handle = BlzCreateFrameByType(frameType, name, parent, inherits or "", context or 0)
    return frame
end

--- @class SimpleTemplateFrame
SimpleTemplateFrame = {}
setmetatable(SimpleTemplateFrame, {__index = SimpleBaseFrame})
---new
---@param template string
---@param parent framehandle
---@param priority integer
---@param context integer
function SimpleTemplateFrame:new(template, parent, priority, context)
    local frame = SimpleBaseFrame:new()
    frame.handle = BlzCreateFrame(template, parent, priority or 0, context or 0)
    return frame
end

--- @class SimpleSimpleFrame
SimpleSimpleFrame = {}
setmetatable(SimpleSimpleFrame, {__index = SimpleBaseFrame})
---new
---@param template string
---@param parent framehandle
---@param context integer
function SimpleSimpleFrame:new(template, parent, context)
    local frame = SimpleBaseFrame:new()
    frame.handle = BlzCreateSimpleFrame(template, parent, context or 0)
    return frame
end

--- @class SimpleEmptyFrame
SimpleEmptyFrame = {}
setmetatable(SimpleEmptyFrame, {__index = SimpleTypeFrame})
---new
---@param name string
---@param parent framehandle
---@param context integer
function SimpleEmptyFrame:new(name, parent, context)
    return SimpleTypeFrame:new(name, "FRAME", parent, "", context)
end

--- @class SimpleBackdropTextureFrame
SimpleBackdropTextureFrame = {}
setmetatable(SimpleBackdropTextureFrame, { __index = SimpleTypeFrame})
---new
---@param name string
---@param parent framehandle
---@param context integer
function SimpleBackdropTextureFrame:new(name, texturePath, parent, context)
    local frame = SimpleTypeFrame:new(name, "BACKDROP", parent, "", context)

    function frame:setTexture(texturePath)
        BlzFrameSetTexture(self.handle, texturePath, 0, true)
    end

    frame:setTexture(texturePath)

    return frame
end

--- @class SimpleTextFrame
SimpleTextFrame = {}
setmetatable(SimpleTextFrame, {__index = SimpleTypeFrame})
---new
---@param name string
---@param text string
---@param scale number
---@param parent framehandle
---@param context integer
function SimpleTextFrame:new(name, text, scale, parent, context)
    local frame = SimpleTypeFrame:new(name, "TEXT", parent, "", context)

    ---setText
    ---@param text string
    function frame:setText(text)
        BlzFrameSetText(self.handle, text)
        return self
    end

    ---setAlignment
    ---@param verticalAlignment textaligntype
    ---@param horizontalAlignment textaligntype
    function frame:setAlignment(verticalAlignment, horizontalAlignment)
        BlzFrameSetTextAlignment(self.handle, verticalAlignment, horizontalAlignment)
        return self
    end

    frame:setText(text)
    frame:setScale(scale)

    return frame
end

--- @class TextureFrame
TextureFrame = {}
---new
---@param namePrefix string
---@param texturePath string
---@param parent framehandle
---@param context integer
function TextureFrame:new(namePrefix, texturePath, parent, context)
    local coverFrame = SimpleEmptyFrame:new(namePrefix .. "_cover", parent, context)
    local textureFrame = SimpleBackdropTextureFrame:new(namePrefix .. "_icon", texturePath, coverFrame.handle, context)
    BlzFrameSetAllPoints(textureFrame.handle, coverFrame.handle)

    local obj = {
        cover = coverFrame,
        texture = textureFrame
    }

    function obj:setTexture(texturePath)
        self.texture:setTexture(texturePath)
        return self
    end

    setmetatable(obj, self)
    self.__index = self
    return obj
end

UPGRADE_DATA_FRAME_TEXT_ALIGNMENT_RIGHT = 1
UPGRADE_DATA_FRAME_TEXT_ALIGNMENT_LEFT = 2

--- @class UpgradeDataFrame
UpgradeDataFrame = {}
---new
---@param namePrefix string
---@param iconPath string
---@param text string
---@param textScale number
---@param textAlignment number
---@param parent framehandle
---@param context integer
function UpgradeDataFrame:new(namePrefix, iconPath, text, textScale, textAlignment, parent, context)
    local coverFrame = SimpleEmptyFrame:new(namePrefix .. "_cover", parent, context)
    local iconFrame = TextureFrame:new(namePrefix .. "_icon", iconPath, coverFrame.handle, context)
    local textFrame = SimpleTextFrame:new(namePrefix .. "_text", text, textScale, coverFrame.handle, context)
    if textAlignment == UPGRADE_DATA_FRAME_TEXT_ALIGNMENT_RIGHT then
        iconFrame.cover:setRelativePoint(FRAMEPOINT_LEFT, coverFrame.handle, FRAMEPOINT_LEFT, 0, 0)
        textFrame:setRelativePoint(FRAMEPOINT_LEFT, iconFrame.cover.handle, FRAMEPOINT_RIGHT, 0.0008 * textScale, 0)
        textFrame:setRelativePoint(FRAMEPOINT_RIGHT, coverFrame.handle, FRAMEPOINT_RIGHT, 0, 0)
    else
        iconFrame.cover:setRelativePoint(FRAMEPOINT_RIGHT, coverFrame.handle, FRAMEPOINT_RIGHT, 0, 0)
        textFrame:setRelativePoint(FRAMEPOINT_RIGHT, iconFrame.cover.handle, FRAMEPOINT_LEFT, -0.0008 * textScale, 0)
        textFrame:setRelativePoint(FRAMEPOINT_LEFT, coverFrame.handle, FRAMEPOINT_LEFT, 0, 0)
    end
    textFrame:setAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_CENTER)

    local obj = {
        cover = coverFrame,
        icon = iconFrame,
        text = textFrame
    }

    function obj:setIconPath(iconPath)
        self.icon:setTexture(iconPath)
        return self
    end

    function obj:setText(text)
        self.text:setText(text)
        return self
    end

    function obj:setTextScale(scale)
        self.text:setScale(scale)
        return self
    end

    function obj:setVisible(visibility)
        self.cover:setVisible(visibility)
        return self
    end

    function obj:setSize(width, height)
        self.cover:setSize(width, height)
        self.icon.cover:setSize(math.min(width, height), math.min(width, height))
        return self
    end

    setmetatable(obj, self)
    self.__index = self
    return obj
end

--- @class TemplateBackdropFrame
TemplateBackdropFrame = {}
---new
---@param namePrefix string
---@param template string
---@param parent framehandle
---@param priority integer
---@param context integer
function TemplateBackdropFrame:new(namePrefix, template, parent, priority, context)
    local coverFrame = SimpleEmptyFrame:new(namePrefix .. "_cover", parent, context)
    local backdropFrame = SimpleTemplateFrame:new(template, coverFrame.handle, priority, context)
    BlzFrameSetAllPoints(backdropFrame.handle, coverFrame.handle)

    local obj = {
        cover = coverFrame,
        backdrop = backdropFrame
    }

    setmetatable(obj, self)
    self.__index = self
    return obj
end